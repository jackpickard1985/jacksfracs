import turtle
screen = turtle.Screen()
  #set size:
screen.setup(width = 1.0, height = 1.0)
  #remove close,minimaze,maximaze buttons:
canvas = screen.getcanvas()
root = canvas.winfo_toplevel()
root.overrideredirect(1)
tracer_speed = 00
turtle.tracer(tracer_speed, 0)
turtle.hideturtle()
colour_counter = 0
pic_name = 0
counter = 0
def koch_curve(t, iterations, length, shortening_factor, angle):
    if iterations == 0:
        t.forward(length)          
    else:
        iterations = iterations - 1
        length = length / shortening_factor
        koch_curve(t, iterations, length, shortening_factor, angle * 1.1)
        t.left(angle * 1 + interest_number)
        koch_curve(t, iterations, length, shortening_factor, angle)
        t.right(angle * 2.40003 + (interest_number*1.0005)) # change this number for interest eg 2.7
        koch_curve(t, iterations, length, shortening_factor, angle)
        t.left(angle * 0.9 - (interest_number/1000))
        koch_curve(t, iterations, length, shortening_factor, angle)
t = turtle.Turtle()
turtle.hideturtle()
turtle.speed(10)
turtle.delay(0)


overall_size = 250
range_setter = 35 # RANGE
for z in range(900):
    interest_number = 0
    extra_angle = 0.05
    t = turtle.Turtle()
    turtle.hideturtle()
    turtle.speed(10)
    turtle.delay(0)
    turtle.tracer(tracer_speed, 0)
    overall_size = overall_size * 0.7   # sets rate of size change
    range_setter = int(range_setter * 1.3 + 3) #LENGTH
    size_setter = 0.3
    the_shade = [10, 10, 10] # START COLOUR
    top_shades = [99, 99, 99] # max shade out of 99 max
    add_shades = [1, 1, 1]   # rate of colour changes RGB !!!!!!!!!
    for i in range(range_setter):
      size_setter = size_setter + 0.1 
      t.left(-70 - extra_angle)
      for c in range(0,3):
          if (the_shade[c] < (top_shades[c] - add_shades [c])):
              the_shade[c] = the_shade[c] + add_shades[c] # SHADING
          else:
              if (c == 0): the_shade[c] = (the_shade[c] - top_shades[c]) + 10   #R returns
              elif(c == 1): the_shade[c] = (the_shade[c] - top_shades[c]) + 10   #G returns
              else: the_shade[c] = (the_shade[c] - top_shades[c]) + 10            #B returns
      t.color('#500000', '#' + str(the_shade[0]) + str(the_shade[1]) + str(the_shade[2])) # COLOUR
      for i in range(1): # range dictates how long it carries on
        t.begin_fill()  # COLOUR
        koch_curve(t, 4, 50 * size_setter * overall_size, 3, 60) # second number = size
        t.right(1) # don't know what this number does, started at 12, 1 is different
        extra_angle = extra_angle * 0.6 + 0.8 + (extra_angle*extra_angle)/50
        t.end_fill()  # COLOUR
        interest_number = interest_number + 0.03
        if (counter == 5):
            turtle.getcanvas().postscript(file=(str(pic_name) + ".eps")) #SAVE eps
            counter = 0
        pic_name = pic_name + 1
        counter = counter + 1
    turtle.Screen().clear()
    turtle.reset()
    turtle.hideturtle()
    if tracer_speed < 100:
        tracer_speed = tracer_speed + 5


turtle.mainloop()
